//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Models/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""CharControl"",
            ""id"": ""a83780f2-b4d1-49b0-8039-991b084a0c22"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""5b0f7321-c823-419a-a96a-e15c423dbe09"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""eb5ee128-976c-49c9-9389-df6ea1bf5921"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""51790fcb-e9c6-4681-9924-5d3790141d08"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b33dff39-964b-4990-85a6-50dc8509e4bf"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharControl
        m_CharControl = asset.FindActionMap("CharControl", throwIfNotFound: true);
        m_CharControl_Movement = m_CharControl.FindAction("Movement", throwIfNotFound: true);
        m_CharControl_Run = m_CharControl.FindAction("Run", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharControl
    private readonly InputActionMap m_CharControl;
    private ICharControlActions m_CharControlActionsCallbackInterface;
    private readonly InputAction m_CharControl_Movement;
    private readonly InputAction m_CharControl_Run;
    public struct CharControlActions
    {
        private @PlayerInput m_Wrapper;
        public CharControlActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CharControl_Movement;
        public InputAction @Run => m_Wrapper.m_CharControl_Run;
        public InputActionMap Get() { return m_Wrapper.m_CharControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharControlActions set) { return set.Get(); }
        public void SetCallbacks(ICharControlActions instance)
        {
            if (m_Wrapper.m_CharControlActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_CharControlActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_CharControlActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_CharControlActionsCallbackInterface.OnMovement;
                @Run.started -= m_Wrapper.m_CharControlActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_CharControlActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_CharControlActionsCallbackInterface.OnRun;
            }
            m_Wrapper.m_CharControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
            }
        }
    }
    public CharControlActions @CharControl => new CharControlActions(this);
    public interface ICharControlActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
    }
}
